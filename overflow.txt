// test('shows logout when signed in', async () => {
//     const id = '629ad0cbcded9bc204ddb0f3'
//     const Buffer = require('safe-buffer').Buffer
//     const sessionObject = {
//         passport: {
//             user: id
//         }
//     }
//     const sessionString = Buffer.from(
//         JSON.stringify(sessionObject)
//     ).toString('base64')

//     const Keygrip = require('keygrip')
//     const keys = require('../config/keys')
//     const keygrip = new Keygrip([keys.cookieKey])
//     const sig = keygrip.sign('session=' + sessionString)
//     console.log(sessionString, sig)

//     await page.setCookie({ name: 'session', value: sessionString })
//     await page.setCookie({ name: 'session.sig', value: sig})
//     await page.goto('localhost:3000')
//     await page.waitFor('a[href="/auth/logout"]')
//     const check = await page.$eval('a[href="/auth/logout"]', i => i.innerHTML)
//     expect(check).toEqual('Logout')

// })

Number.prototype._called = {};

const Page = require("./helpers/page");

let page;

beforeEach(async () => {
  page = await Page.build();
  await page.goto("localhost:3000");
});

afterEach(async () => {
  await page.close();
});

describe("when logged in", async () => {
  beforeEach(async () => {
    await page.login();
    await page.click("a.btn-floating");
  });

  test("blog form renders", async () => {
    const label = await page.getContentsOf("form label");
    expect(label).toEqual("Blog Title");
  });

  describe("using valid inputs", async () => {
    beforeEach(async () => {
      await page.type(".title input", "This is the title string");
      await page.type(".content input", "This is the content string");
      await page.click("form button");
    });

    test("submit takes user to review screen", async () => {
      const text = await page.getContentsOf("h5");
      expect(text).toEqual("Please confirm your entries");
    });

    test("saving adds blog to index", async () => {
      await page.click("button.green");
      await page.waitFor(".card");

      const title = await page.getContentsOf(".card-title");
      const content = await page.getContentsOf("p");

      expect(title).toEqual("This is the title string");
      expect(content).toEqual("This is the content string");
    });
  });

  describe("using invalid inputs", async () => {
    beforeEach(async () => {
      await page.click("form button");
    });

    test("form shows error message", async () => {
      const titleError = await page.getContentsOf(".title .red-text");
      const contentError = await page.getContentsOf(".content .red-text");
      expect(titleError).toEqual("You must provide a value");
      expect(contentError).toEqual("You must provide a value");
    });
  });

  describe("when user is not logged in", async () => {
    test("user cannot view blog posts", async () => {
      const result = await page.get("/api/blogs");
      // console.log(result)
      expect(result).toEqual({ error: "You must log in!" });
    });

    test("user cannot view blogs", async () => {
      const result = await page.post("/api/blogs", {
        title: "T",
        content: "C",
      });
      expect(result).toEqual({ error: "You must log in!" });
    });
  });
});

  const actions = [
    {
      method: "get",
      path: "api/blogs",
    },
    {
      method: "post",
      path: "api/blogs",
      data: {
        title: "T",
        content: "C",
      },
    },
  ];

  //     test('prohibited Get and Post request actions', async() => {
  //         const results = await page.execReq(actions)
  //         for(let i of results) {
  //             expect(i).toEqual({ error: 'You must log in!' })
  //         }
  //     })
  //


